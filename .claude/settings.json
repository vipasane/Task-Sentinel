{
  "env": {
    "CLAUDE_FLOW_AUTO_COMMIT": "false",
    "CLAUDE_FLOW_AUTO_PUSH": "false",
    "CLAUDE_FLOW_HOOKS_ENABLED": "true",
    "CLAUDE_FLOW_TELEMETRY_ENABLED": "true",
    "CLAUDE_FLOW_REMOTE_EXECUTION": "true",
    "CLAUDE_FLOW_CHECKPOINTS_ENABLED": "true"
  },
  "permissions": {
    "allow": [
      "Bash(npx claude-flow:*)",
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Bash(npm test:*)",
      "Bash(git status)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push)",
      "Bash(git config:*)",
      "Bash(git tag:*)",
      "Bash(git branch:*)",
      "Bash(git checkout:*)",
      "Bash(git stash:*)",
      "Bash(jq:*)",
      "Bash(node:*)",
      "Bash(which:*)",
      "Bash(pwd)",
      "Bash(ls:*)"
    ],
    "deny": [
      "Bash(rm -rf /)"
    ]
  },
  "hooks": {
    "SessionStart": [
      {
        "matcher": "task-sentinel-session",
        "hooks": [
          {
            "type": "command",
            "command": "npx claude-flow@alpha hooks session-restore --session-id 'task-sentinel-session' --restore-context true --resume-in-progress-tasks true --memory-namespace 'task-sentinel/active'"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "cat | jq -r '.tool_input.command // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks pre-command --command '{}' --validate-safety true --prepare-resources true"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "cat | jq -r '.tool_input.file_path // .tool_input.path // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks pre-edit --file '{}' --auto-assign-agents true --load-context true"
          }
        ]
      },
      {
        "matcher": "task-sentinel-claim",
        "hooks": [
          {
            "type": "command",
            "command": "npx claude-flow@alpha hooks pre-task --description 'task-claim-validation' --validate-dependencies true --check-worker-availability true"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "cat | jq -r '.tool_input.command // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks post-command --command '{}' --track-metrics true --store-results true"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "cat | jq -r '.tool_input.file_path // .tool_input.path // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks post-edit --file '{}' --format true --update-memory true"
          }
        ]
      },
      {
        "matcher": "task-sentinel-claim",
        "hooks": [
          {
            "type": "command",
            "command": "npx claude-flow@alpha hooks post-task --task-id 'task-claim' --initialize-heartbeat true --memory-key 'task-sentinel/active/current-task' --memory-namespace 'ooda-loop'"
          }
        ]
      },
      {
        "matcher": "task-sentinel-complete",
        "hooks": [
          {
            "type": "command",
            "command": "npx claude-flow@alpha hooks post-task --task-id 'task-complete' --cleanup-memory true --close-issue true --export-metrics true --memory-namespace 'task-sentinel/active'"
          }
        ]
      },
      {
        "matcher": "task-sentinel-heartbeat",
        "hooks": [
          {
            "type": "command",
            "command": "npx claude-flow@alpha memory retrieve --key 'task-sentinel/current-task' --namespace 'ooda-loop' | jq -r '.issue_number // empty' | xargs -I {} sh -c 'if [ -n \"{}\" ]; then gh issue comment {} --body \"[HEARTBEAT] Task in progress - $(date -Iseconds)\"; fi'"
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "task-sentinel-observe",
        "hooks": [
          {
            "type": "command",
            "command": "gh issue list --repo $(git config --get remote.origin.url | sed 's|.*github.com[:/]\\(.*\\)\\.git|\\1|') --label ready --label queued --state open --json number,title,labels,assignees 2>/dev/null | jq '.[] | select(.assignees | length == 0)' | npx claude-flow@alpha memory store --key 'task-sentinel/available-tasks' --namespace 'ooda-loop' || true",
            "timeout": 10
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "matcher": "manual",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash -c 'INPUT=$(cat); CUSTOM=$(echo \"$INPUT\" | jq -r \".custom_instructions // \\\"\\\"\"); echo \"ðŸ”„ PreCompact Guidance:\"; echo \"ðŸ“‹ IMPORTANT: Review CLAUDE.md in project root for:\"; echo \"   â€¢ 54 available agents and concurrent usage patterns\"; echo \"   â€¢ Swarm coordination strategies (hierarchical, mesh, adaptive)\"; echo \"   â€¢ SPARC methodology workflows with batchtools optimization\"; echo \"   â€¢ Critical concurrent execution rules (GOLDEN RULE: 1 MESSAGE = ALL OPERATIONS)\"; echo \"   â€¢ Task Sentinel OODA loop hooks for autonomous coordination\"; if [ -n \"$CUSTOM\" ]; then echo \"ðŸŽ¯ Custom compact instructions: $CUSTOM\"; fi; echo \"âœ… Ready for compact operation\"'"
          }
        ]
      },
      {
        "matcher": "auto",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash -c 'echo \"ðŸ”„ Auto-Compact Guidance (Context Window Full):\"; echo \"ðŸ“‹ CRITICAL: Before compacting, ensure you understand:\"; echo \"   â€¢ All 54 agents available in .claude/agents/ directory\"; echo \"   â€¢ Concurrent execution patterns from CLAUDE.md\"; echo \"   â€¢ Batchtools optimization for 300% performance gains\"; echo \"   â€¢ Swarm coordination strategies for complex tasks\"; echo \"   â€¢ Task Sentinel OODA loop automation\"; echo \"âš¡ Apply GOLDEN RULE: Always batch operations in single messages\"; echo \"âœ… Auto-compact proceeding with full agent context\"'"
          }
        ]
      }
    ],
    "SessionEnd": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "npx claude-flow@alpha hooks session-end --generate-summary true --persist-state true --export-metrics true --memory-namespace 'task-sentinel/active'"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "npx claude-flow@alpha hooks session-end --generate-summary true --persist-state true --export-metrics true"
          }
        ]
      }
    ]
  },
  "includeCoAuthoredBy": true,
  "enabledMcpjsonServers": ["claude-flow", "ruv-swarm"],
  "statusLine": {
    "type": "command",
    "command": ".claude/statusline-command.sh"
  }
}
